name: Build NixOS VM images

concurrency: 
  group: ${{ ( github.event_name == 'push' && 'test' ) || 'release' }}
  cancel-in-progress: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' }} 
on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *" 
  push:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      timestamp: ${{ steps.get-timestamp.outputs.time }}
      tag_name: ${{ steps.generate_env_vars.outputs.tag_name }}
    steps:
      - name: Get build timestamp
        id: get-timestamp
        run: |
          echo "time=$(/bin/date -u "+%Y-%m-%d")" >> $GITHUB_OUTPUT
      - name: Generate environmental variables
        id: generate_env_vars
        run: |
          echo "tag_name=nixos-image-${{ ( github.event_name == 'push' && 'test' ) || steps.get-timestamp.outputs.time }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ ( github.event_name == 'push' && format('Test Build {0}', steps.get-timestamp.outputs.time) ) || format('Build {0}', steps.get-timestamp.outputs.time) }}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
      - name: Check for existing tag
        id: check-tag
        run: |
          if gh release view "${{ steps.generate_env_vars.outputs.tag_name }}" -R ${{ github.repository }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Clear previous release
        run: gh release delete ${{ steps.generate_env_vars.outputs.tag_name }} --yes --cleanup-tag -R ${{ github.repository }}
        if: ${{ steps.check-tag.outputs.exists == 'true' }}
      - name: Create new release
        run: |
          gh release create ${{ steps.generate_env_vars.outputs.tag_name }} --title "${{ steps.generate_env_vars.outputs.release_name }}" --generate-notes=false --draft=false --latest=false --prerelease=true

  builds:
    needs: release
    strategy:
      fail-fast: false
      matrix:
        include:
          - format: hyperv
            ext: vhdx
          - format: iso
            ext: iso
          - format: qcow
            ext: qcow2
          - format: virtualbox
            ext: ova
          - format: vmware
            ext: vmdk
    name: nixos.${{ matrix.ext }}
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 32
      - name: Build
        run: |
          nix run github:nix-community/nixos-generators -- -f ${{ matrix.format}} -c ./configuration.nix -o $PWD/result -I nixpkgs=channel:nixos-unstable
      - name: Upload
        run: |
          dirpath=$(readlink -f ./result)
          filepath=$(find "$dirpath" -type f -name "*.${{ matrix.ext }}" | head -n 1)
          cp $filepath nixos.${{ matrix.ext }}
          chmod 755 nixos.${{ matrix.ext }}
          gh release upload ${{ needs.release.outputs.tag_name }} nixos.${{ matrix.ext }} --repo ${{ github.repository }}
          
  publish:
    needs: [release, builds]
    name: Publish
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: Set as latest
      if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
      run: |
        gh release edit ${{ needs.release.outputs.tag_name }} --draft=false --prerelease=false --latest=true --repo ${{ github.repository }}
